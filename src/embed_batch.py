from pathlib import Path
import json, torch, argparse
from typing import List, Dict, Any
from PIL import Image
from tqdm import tqdm

from src.embed import embed_text, embed_images

# ----------------------- EMBED DIRECTORY -----------------
def embed_directory(indir: Path, outfile: Path, *, batch_size: int = 32) -> None:
    """
    Vectorizes all pages of *indir* and writes the result in *outfile*

    Parameters
    ----------
    indir: Path
        Folder with the pais of page_XXX.json and page_XXX.png generated by ingest_pdf.
    outfile: Path
        Path of the .pt file that will contain {'vecs': tensor Nx1536, 'meta': list[dict]}.
    batch_size: int, default 32
        Batch size for the text. For the images -> batch_size//2.

    Returns
    -------
    None
    """
    assert indir.is_dir(), f"{indir} is not a folder"

    meta_files = sorted(indir.glob("*.json"))
    if not meta_files:
        raise ValueError(f"No JSON files found in {indir}")
    
    texts:  List[str]            = []
    images: List[Image.Image]    = []
    metas:  List[Dict[str, Any]] = []

    for mp in tqdm(meta_files, desc="Reading pages"):
        meta = json.loads(mp.read_text())
        img = Image.open(indir / meta["image"]).convert("RGB")
        texts.append(meta["text"])
        images.append(img)
        metas.append(meta)
    
    vec_text = embed_text(texts, batch_size=batch_size)         # N x 768
    vec_image = embed_images(images, batch_size=batch_size//2)  # N x 768
    vecs = torch.cat([vec_text, vec_image], dim=1)              # N x 1536

    outfile.parent.mkdir(parents=True, exist_ok=True)
    payload = torch.save({"vecs": vecs, "meta": metas}, outfile)
    print(f"Saved {vecs.shape[0]} embeddings to {outfile}")

    return payload

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="batch-embed to PDF directory")
    parser.add_argument("indir", type=Path, help="Folder with page_*.json/png")
    parser.add_argument("outfile", type=Path, help="Output .pt file")
    parser.add_argument("--batch", type=int, default=32, help="Text batch size (default 32, images use batch/2)")
    args = parser.parse_args()

    embed_directory(args.indir, args.outfile, batch_size=args.batch)
