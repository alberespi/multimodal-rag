{
  "source": "Foundation_Model_Based_Ship_Detection_in_Satellite_Imagery_for_Maritime_Surveillance.pdf",
  "page": 43,
  "text": "3.5. IMPLEMENTATION DETAILS 27\nFigure 3.3: Validation - Left column: PlanetScope patches with at least one vessel;\nmiddle column: hand-labeled ground truth patches; right column: modelâ€™s predic-\ntion.\n3.5 Implementation Details\n3.5.1 Hardware and Software Environment\nModel training and experiments were conducted on an internal computing server.\nHardware: The server is equipped with a single NVIDIA A40 GPU (Ampere archi-\ntecture) with 48GB of VRAM, as well as dual Intel Xeon CPUs and 32GB of system\nRAM. The high VRAM of the A40 allowed comfortable training with large batch sizes\n(especially for pretraining) and enabled the use of mixed precision to speed up com-\nputations. All data (including the PlanetScope imagery and intermediate patch files,\ntotaling hundreds of gigabytes) were stored on a fast 2TB NVMe SSD attached to the\nserver, ensuring quick data loading. Software: We used Ubuntu 20.04 LTS as the op-\nerating system and managed the Python environment with Anaconda. The code was\nwritten in Python 3.10, utilizing PyTorch 2.6 for the deep learning framework (with\nCUDA 11 for GPU acceleration). Geospatial image processing relied on Rasterio 1.3\nfor reading and writing GeoTIFF images. Other key libraries included NumPy 1.24\nand Pandas 1.x for data manipulation, and scikit-learn for computing certain evalua-\ntion metrics (e.g., generating confusion matrices). We also set fixed random seeds (for",
  "image": "page_043.png"
}