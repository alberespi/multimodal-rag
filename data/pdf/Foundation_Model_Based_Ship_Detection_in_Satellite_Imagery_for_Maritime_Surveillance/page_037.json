{
  "source": "Foundation_Model_Based_Ship_Detection_in_Satellite_Imagery_for_Maritime_Surveillance.pdf",
  "page": 37,
  "text": "3.1. DATA & PRE-PROCESSING 21\ndegradation in performance when mixed valid/NoData patches were included and vali-\ndation was carried out on fully valid images . Evaluating exclusively on ideal validation\ndata can introduce bias, as the model’s robustness to partially masked inputs remains\nuntested. Consequently, only the 100%-valid set was retained for the results reported in\nthis thesis, while acknowledging that an additional validation fold containing partially\ninvalid patches would be required for a fully unbiased assessment.\n3.1.6 Label Generation\nSupervised training (for ship detection) requires ground-truth labels for ships in the\nimagery. These labels were provided in vector form (GeoJSON polygons delineating\neach ship’s outline or location). We converted the vector annotations into raster masks\naligned with our image patches. Using the geospatial metadata (coordinate reference\nsystem and affine transform) from the PlanetScope images, we rasterized the ship\npolygons to binary masks at the same 3m resolution. Each mask pixel is set to 1 if\nit falls inside a ship polygon and 0 otherwise. This process was done on a per-patch\nbasis: for each 128×128 patch, we took the corresponding subset of ship polygons (those\noverlapping that patch’s area) and burned them into a 128×128 binary mask. All masks\nand images share the same CRS and alignment, so that a ship’s pixels in the image\ncorrespond exactly to 1’s in the mask. We utilized the Rasterio library’s functionality\n(specifically rasterio.features.rasterize) [63] to perform this conversion reliably.\nCRS transformations (if needed) were handled so that vector and raster data matched\ncoordinate systems as shown in Figure 3.1. The end result is a set of training image\npatches and matching label masks for supervised learning: each image patch has a\ncorresponding 128 ×128 array of labels (1 for vessel pixel, 0 for water). If a patch\ncontained no part of any ship, its mask would be all zeros (we handle such cases in\ntraining as described later).\nFigure 3.1: PlanetScope raw image with vessels and labels matching marked in red (as\nthey have the same CRS).\n3.1.7 Note on Tools - Introduction to Rasterio\nAll the geospatial preprocessing above was implemented in Python using the Rasterio\nlibrary [63]. Rasterio is a Python API built on GDAL that provides easy access to\ngeospatial raster data using NumPy arrays. In our workflow, Rasterio was used to\nread PlanetScope GeoTIFF images into memory as masked numpy arrays (honoring\nthe NoData mask) and to write out processed patches. It also facilitated coordinate\ntransformations and rasterization of vector labels. For example, reading an image with",
  "image": "page_037.png"
}